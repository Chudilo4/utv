# Generated by Django 4.1.5 on 2023-05-11 14:44

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('avatar', models.ImageField(blank=True, default='profile/avatar/Default_ava.png', null=True, upload_to='profile/avatar/')),
                ('telegram', models.CharField(max_length=35, null=True, verbose_name='Telegram ID')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Cards',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Название проекта')),
                ('description', models.TextField(verbose_name='Описание проекта')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('deadline', models.DateTimeField(verbose_name='Дедлайн')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Дата обновления карточки')),
                ('archived', models.BooleanField(blank=True, default=False, verbose_name='Добавить в архив')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Автор')),
                ('performers', models.ManyToManyField(blank=True, related_name='performers_card', to=settings.AUTH_USER_MODEL, verbose_name='Исполнители')),
            ],
            options={
                'verbose_name': 'Карточка',
                'verbose_name_plural': 'Карточки',
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('actual_time', models.IntegerField(default=0, verbose_name='Фактическое время')),
                ('scheduled_time', models.IntegerField(default=0, verbose_name='Плановое время')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания работы')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Дата обновления работы')),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workers_card', to='utv_api.cards')),
            ],
            options={
                'verbose_name': 'Работа',
                'verbose_name_plural': 'Работы',
            },
        ),
        migrations.CreateModel(
            name='TableProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_client', models.FloatField(blank=True, null=True, verbose_name='Цена для клиента')),
                ('planned_cost', models.FloatField(blank=True, null=True, verbose_name='Плановая себестоимость')),
                ('cost', models.FloatField(blank=True, null=True, verbose_name='Фактическая себестоимость')),
                ('planned_salary', models.FloatField(blank=True, null=True, verbose_name='Плановая зарплата')),
                ('salary', models.FloatField(blank=True, null=True, verbose_name='Фактическая зарплата')),
                ('planned_actors_salary', models.FloatField(blank=True, null=True, verbose_name='Плановая зарплата актёрам')),
                ('actors_salary', models.FloatField(blank=True, null=True, verbose_name='Зарплата актёрам')),
                ('planned_taxes_FOT', models.FloatField(blank=True, null=True, verbose_name='Плановые налоги с ФОТ')),
                ('taxes_FOT', models.FloatField(blank=True, null=True, verbose_name='Фактические налоги с ФОТ')),
                ('planned_other_expenses', models.FloatField(blank=True, null=True, verbose_name='Плановые Покупка реквизита для организации съемочного процесса/ Непредвиденные расходы')),
                ('other_expenses', models.FloatField(blank=True, null=True, verbose_name='Плановые Покупка реквизита для организации съемочного процесса/ Непредвиденные расходы')),
                ('planned_buying_music', models.FloatField(blank=True, null=True, verbose_name='Плановая покупка музыки')),
                ('buying_music', models.FloatField(blank=True, null=True, verbose_name='Фактическая покупка музыки')),
                ('planned_travel_expenses', models.FloatField(blank=True, null=True, verbose_name='Плановые командировачные расходы')),
                ('travel_expenses', models.FloatField(blank=True, null=True, verbose_name='Фактические командировачные расходы')),
                ('planned_fare', models.FloatField(blank=True, null=True, verbose_name='Плановые транспортные расходы')),
                ('fare', models.FloatField(blank=True, null=True, verbose_name='Фактические транспортные расходы')),
                ('planned_general_expenses', models.FloatField(blank=True, null=True, verbose_name='Плановые общехозяйственные расходы')),
                ('general_expenses', models.FloatField(blank=True, null=True, verbose_name='Фактические общехозяйственные расходы')),
                ('planned_profit', models.FloatField(blank=True, null=True, verbose_name='Плановая прибыль')),
                ('profit', models.FloatField(blank=True, null=True, verbose_name='Фактическая прибыль')),
                ('planned_profitability', models.FloatField(blank=True, null=True, verbose_name='Плановая рентабельность')),
                ('profitability', models.FloatField(blank=True, null=True, verbose_name='Фактическая рентабельность')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания таблицы')),
                ('updated_time', models.DateTimeField(auto_now=True, verbose_name='Дата обновления таблицы')),
                ('author', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='utv_api.cards')),
            ],
            options={
                'verbose_name': 'Таблица',
                'verbose_name_plural': 'Таблицы',
            },
        ),
        migrations.CreateModel(
            name='TableExcel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('path_excel', models.FileField(upload_to='excel/')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('author', models.ForeignKey(default=1, on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL)),
                ('card', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='utv_api.cards')),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='utv_api.tableproject')),
            ],
            options={
                'verbose_name': 'Таблица Excel',
                'verbose_name_plural': 'Таблицы Excel',
            },
        ),
        migrations.CreateModel(
            name='EmployeeRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.IntegerField(null=True, verbose_name='Заработок в час')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='Дата обновления')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='employeerate', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Зарплата',
                'verbose_name_plural': 'Зарплаты',
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(verbose_name='Поле для коментария')),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='comment_author', to=settings.AUTH_USER_MODEL)),
                ('card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments_card', to='utv_api.cards')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='utv_api.comments')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ('-created_time',),
            },
        ),
    ]
